// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class PlayerJoin;
class PlayerJoinDefaultTypeInternal;
extern PlayerJoinDefaultTypeInternal _PlayerJoin_default_instance_;
class PlayerLeave;
class PlayerLeaveDefaultTypeInternal;
extern PlayerLeaveDefaultTypeInternal _PlayerLeave_default_instance_;
class PlayerMove;
class PlayerMoveDefaultTypeInternal;
extern PlayerMoveDefaultTypeInternal _PlayerMove_default_instance_;
class ServerBroadcast;
class ServerBroadcastDefaultTypeInternal;
extern ServerBroadcastDefaultTypeInternal _ServerBroadcast_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PlayerJoin* Arena::CreateMaybeMessage<::PlayerJoin>(Arena*);
template<> ::PlayerLeave* Arena::CreateMaybeMessage<::PlayerLeave>(Arena*);
template<> ::PlayerMove* Arena::CreateMaybeMessage<::PlayerMove>(Arena*);
template<> ::ServerBroadcast* Arena::CreateMaybeMessage<::ServerBroadcast>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PlayerJoin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerJoin) */ {
 public:
  inline PlayerJoin() : PlayerJoin(nullptr) {};
  virtual ~PlayerJoin();

  PlayerJoin(const PlayerJoin& from);
  PlayerJoin(PlayerJoin&& from) noexcept
    : PlayerJoin() {
    *this = ::std::move(from);
  }

  inline PlayerJoin& operator=(const PlayerJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerJoin& operator=(PlayerJoin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerJoin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoin* internal_default_instance() {
    return reinterpret_cast<const PlayerJoin*>(
               &_PlayerJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerJoin& a, PlayerJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerJoin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoin* New() const final {
    return CreateMaybeMessage<PlayerJoin>(nullptr);
  }

  PlayerJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerJoin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerJoin& from);
  void MergeFrom(const PlayerJoin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerJoin";
  }
  protected:
  explicit PlayerJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  void set_player_id(const std::string& value);
  void set_player_id(std::string&& value);
  void set_player_id(const char* value);
  void set_player_id(const char* value, size_t size);
  std::string* mutable_player_id();
  std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_player_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player_id(
      std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // @@protoc_insertion_point(class_scope:PlayerJoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PlayerLeave PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerLeave) */ {
 public:
  inline PlayerLeave() : PlayerLeave(nullptr) {};
  virtual ~PlayerLeave();

  PlayerLeave(const PlayerLeave& from);
  PlayerLeave(PlayerLeave&& from) noexcept
    : PlayerLeave() {
    *this = ::std::move(from);
  }

  inline PlayerLeave& operator=(const PlayerLeave& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLeave& operator=(PlayerLeave&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerLeave& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLeave* internal_default_instance() {
    return reinterpret_cast<const PlayerLeave*>(
               &_PlayerLeave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerLeave& a, PlayerLeave& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLeave* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerLeave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLeave* New() const final {
    return CreateMaybeMessage<PlayerLeave>(nullptr);
  }

  PlayerLeave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLeave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLeave& from);
  void MergeFrom(const PlayerLeave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLeave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerLeave";
  }
  protected:
  explicit PlayerLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  void set_player_id(const std::string& value);
  void set_player_id(std::string&& value);
  void set_player_id(const char* value);
  void set_player_id(const char* value, size_t size);
  std::string* mutable_player_id();
  std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_player_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player_id(
      std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // @@protoc_insertion_point(class_scope:PlayerLeave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PlayerMove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerMove) */ {
 public:
  inline PlayerMove() : PlayerMove(nullptr) {};
  virtual ~PlayerMove();

  PlayerMove(const PlayerMove& from);
  PlayerMove(PlayerMove&& from) noexcept
    : PlayerMove() {
    *this = ::std::move(from);
  }

  inline PlayerMove& operator=(const PlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMove& operator=(PlayerMove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMove* internal_default_instance() {
    return reinterpret_cast<const PlayerMove*>(
               &_PlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerMove& a, PlayerMove& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMove* New() const final {
    return CreateMaybeMessage<PlayerMove>(nullptr);
  }

  PlayerMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerMove& from);
  void MergeFrom(const PlayerMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerMove";
  }
  protected:
  explicit PlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  void set_player_id(const std::string& value);
  void set_player_id(std::string&& value);
  void set_player_id(const char* value);
  void set_player_id(const char* value, size_t size);
  std::string* mutable_player_id();
  std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_player_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player_id(
      std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ServerBroadcast PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerBroadcast) */ {
 public:
  inline ServerBroadcast() : ServerBroadcast(nullptr) {};
  virtual ~ServerBroadcast();

  ServerBroadcast(const ServerBroadcast& from);
  ServerBroadcast(ServerBroadcast&& from) noexcept
    : ServerBroadcast() {
    *this = ::std::move(from);
  }

  inline ServerBroadcast& operator=(const ServerBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerBroadcast& operator=(ServerBroadcast&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerBroadcast* internal_default_instance() {
    return reinterpret_cast<const ServerBroadcast*>(
               &_ServerBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerBroadcast& a, ServerBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerBroadcast* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerBroadcast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerBroadcast* New() const final {
    return CreateMaybeMessage<ServerBroadcast>(nullptr);
  }

  ServerBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerBroadcast& from);
  void MergeFrom(const ServerBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerBroadcast";
  }
  protected:
  explicit ServerBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .PlayerMove players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::PlayerMove* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMove >*
      mutable_players();
  private:
  const ::PlayerMove& _internal_players(int index) const;
  ::PlayerMove* _internal_add_players();
  public:
  const ::PlayerMove& players(int index) const;
  ::PlayerMove* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMove >&
      players() const;

  // @@protoc_insertion_point(class_scope:ServerBroadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMove > players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerJoin

// string player_id = 1;
inline void PlayerJoin::clear_player_id() {
  player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerJoin::player_id() const {
  // @@protoc_insertion_point(field_get:PlayerJoin.player_id)
  return _internal_player_id();
}
inline void PlayerJoin::set_player_id(const std::string& value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:PlayerJoin.player_id)
}
inline std::string* PlayerJoin::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:PlayerJoin.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& PlayerJoin::_internal_player_id() const {
  return player_id_.Get();
}
inline void PlayerJoin::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerJoin::set_player_id(std::string&& value) {
  
  player_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerJoin.player_id)
}
inline void PlayerJoin::set_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerJoin.player_id)
}
inline void PlayerJoin::set_player_id(const char* value,
    size_t size) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerJoin.player_id)
}
inline std::string* PlayerJoin::_internal_mutable_player_id() {
  
  return player_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerJoin::release_player_id() {
  // @@protoc_insertion_point(field_release:PlayerJoin.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerJoin::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerJoin.player_id)
}
inline std::string* PlayerJoin::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlayerJoin.player_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return player_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerJoin::unsafe_arena_set_allocated_player_id(
    std::string* player_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      player_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerJoin.player_id)
}

// -------------------------------------------------------------------

// PlayerLeave

// string player_id = 1;
inline void PlayerLeave::clear_player_id() {
  player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerLeave::player_id() const {
  // @@protoc_insertion_point(field_get:PlayerLeave.player_id)
  return _internal_player_id();
}
inline void PlayerLeave::set_player_id(const std::string& value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:PlayerLeave.player_id)
}
inline std::string* PlayerLeave::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:PlayerLeave.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& PlayerLeave::_internal_player_id() const {
  return player_id_.Get();
}
inline void PlayerLeave::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerLeave::set_player_id(std::string&& value) {
  
  player_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerLeave.player_id)
}
inline void PlayerLeave::set_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerLeave.player_id)
}
inline void PlayerLeave::set_player_id(const char* value,
    size_t size) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerLeave.player_id)
}
inline std::string* PlayerLeave::_internal_mutable_player_id() {
  
  return player_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerLeave::release_player_id() {
  // @@protoc_insertion_point(field_release:PlayerLeave.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerLeave::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerLeave.player_id)
}
inline std::string* PlayerLeave::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlayerLeave.player_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return player_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerLeave::unsafe_arena_set_allocated_player_id(
    std::string* player_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      player_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerLeave.player_id)
}

// -------------------------------------------------------------------

// PlayerMove

// string player_id = 1;
inline void PlayerMove::clear_player_id() {
  player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerMove::player_id() const {
  // @@protoc_insertion_point(field_get:PlayerMove.player_id)
  return _internal_player_id();
}
inline void PlayerMove::set_player_id(const std::string& value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:PlayerMove.player_id)
}
inline std::string* PlayerMove::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:PlayerMove.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& PlayerMove::_internal_player_id() const {
  return player_id_.Get();
}
inline void PlayerMove::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerMove::set_player_id(std::string&& value) {
  
  player_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerMove.player_id)
}
inline void PlayerMove::set_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerMove.player_id)
}
inline void PlayerMove::set_player_id(const char* value,
    size_t size) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerMove.player_id)
}
inline std::string* PlayerMove::_internal_mutable_player_id() {
  
  return player_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerMove::release_player_id() {
  // @@protoc_insertion_point(field_release:PlayerMove.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerMove::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerMove.player_id)
}
inline std::string* PlayerMove::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlayerMove.player_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return player_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerMove::unsafe_arena_set_allocated_player_id(
    std::string* player_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      player_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerMove.player_id)
}

// float x = 2;
inline void PlayerMove::clear_x() {
  x_ = 0;
}
inline float PlayerMove::_internal_x() const {
  return x_;
}
inline float PlayerMove::x() const {
  // @@protoc_insertion_point(field_get:PlayerMove.x)
  return _internal_x();
}
inline void PlayerMove::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerMove::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlayerMove.x)
}

// float y = 3;
inline void PlayerMove::clear_y() {
  y_ = 0;
}
inline float PlayerMove::_internal_y() const {
  return y_;
}
inline float PlayerMove::y() const {
  // @@protoc_insertion_point(field_get:PlayerMove.y)
  return _internal_y();
}
inline void PlayerMove::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerMove::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlayerMove.y)
}

// float z = 4;
inline void PlayerMove::clear_z() {
  z_ = 0;
}
inline float PlayerMove::_internal_z() const {
  return z_;
}
inline float PlayerMove::z() const {
  // @@protoc_insertion_point(field_get:PlayerMove.z)
  return _internal_z();
}
inline void PlayerMove::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PlayerMove::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PlayerMove.z)
}

// -------------------------------------------------------------------

// ServerBroadcast

// repeated .PlayerMove players = 1;
inline int ServerBroadcast::_internal_players_size() const {
  return players_.size();
}
inline int ServerBroadcast::players_size() const {
  return _internal_players_size();
}
inline void ServerBroadcast::clear_players() {
  players_.Clear();
}
inline ::PlayerMove* ServerBroadcast::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:ServerBroadcast.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMove >*
ServerBroadcast::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:ServerBroadcast.players)
  return &players_;
}
inline const ::PlayerMove& ServerBroadcast::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::PlayerMove& ServerBroadcast::players(int index) const {
  // @@protoc_insertion_point(field_get:ServerBroadcast.players)
  return _internal_players(index);
}
inline ::PlayerMove* ServerBroadcast::_internal_add_players() {
  return players_.Add();
}
inline ::PlayerMove* ServerBroadcast::add_players() {
  // @@protoc_insertion_point(field_add:ServerBroadcast.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMove >&
ServerBroadcast::players() const {
  // @@protoc_insertion_point(field_list:ServerBroadcast.players)
  return players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
