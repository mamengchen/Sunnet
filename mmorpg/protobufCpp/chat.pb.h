// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace chat {
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::ChatMessage* Arena::CreateMaybeMessage<::chat::ChatMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

enum MassageType : int {
  TEXT = 0,
  IMAGE = 1,
  STATUS = 2,
  MassageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MassageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MassageType_IsValid(int value);
constexpr MassageType MassageType_MIN = TEXT;
constexpr MassageType MassageType_MAX = STATUS;
constexpr int MassageType_ARRAYSIZE = MassageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MassageType_descriptor();
template<typename T>
inline const std::string& MassageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MassageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MassageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MassageType_descriptor(), enum_t_value);
}
inline bool MassageType_Parse(
    const std::string& name, MassageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MassageType>(
    MassageType_descriptor(), name, value);
}
// ===================================================================

class ChatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {};
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMessage& default_instance();

  enum ContentCase {
    kText = 5,
    kImageData = 6,
    kOnline = 7,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return CreateMaybeMessage<ChatMessage>(nullptr);
  }

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kReceiverFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kTypeFieldNumber = 4,
    kTextFieldNumber = 5,
    kImageDataFieldNumber = 6,
    kOnlineFieldNumber = 7,
  };
  // string sender = 1;
  void clear_sender();
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sender();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sender(
      std::string* sender);
  private:
  const std::string& _internal_sender() const;
  void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string receiver = 2;
  void clear_receiver();
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_receiver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_receiver(
      std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .chat.MassageType type = 4;
  void clear_type();
  ::chat::MassageType type() const;
  void set_type(::chat::MassageType value);
  private:
  ::chat::MassageType _internal_type() const;
  void _internal_set_type(::chat::MassageType value);
  public:

  // string text = 5;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bytes image_data = 6;
  private:
  bool _internal_has_image_data() const;
  public:
  void clear_image_data();
  const std::string& image_data() const;
  void set_image_data(const std::string& value);
  void set_image_data(std::string&& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  std::string* mutable_image_data();
  std::string* release_image_data();
  void set_allocated_image_data(std::string* image_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_data(
      std::string* image_data);
  private:
  const std::string& _internal_image_data() const;
  void _internal_set_image_data(const std::string& value);
  std::string* _internal_mutable_image_data();
  public:

  // bool online = 7;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:chat.ChatMessage)
 private:
  class _Internal;
  void set_has_text();
  void set_has_image_data();
  void set_has_online();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  int type_;
  union ContentUnion {
    ContentUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_data_;
    bool online_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessage

// string sender = 1;
inline void ChatMessage::clear_sender() {
  sender_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatMessage::sender() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.sender)
  return _internal_sender();
}
inline void ChatMessage::set_sender(const std::string& value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.sender)
}
inline std::string* ChatMessage::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.sender)
  return _internal_mutable_sender();
}
inline const std::string& ChatMessage::_internal_sender() const {
  return sender_.Get();
}
inline void ChatMessage::_internal_set_sender(const std::string& value) {
  
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatMessage::set_sender(std::string&& value) {
  
  sender_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ChatMessage.sender)
}
inline void ChatMessage::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.sender)
}
inline void ChatMessage::set_sender(const char* value,
    size_t size) {
  
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.sender)
}
inline std::string* ChatMessage::_internal_mutable_sender() {
  
  return sender_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatMessage::release_sender() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessage::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.sender)
}
inline std::string* ChatMessage::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ChatMessage.sender)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sender_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatMessage::unsafe_arena_set_allocated_sender(
    std::string* sender) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sender, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ChatMessage.sender)
}

// string receiver = 2;
inline void ChatMessage::clear_receiver() {
  receiver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatMessage::receiver() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.receiver)
  return _internal_receiver();
}
inline void ChatMessage::set_receiver(const std::string& value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.receiver)
}
inline std::string* ChatMessage::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.receiver)
  return _internal_mutable_receiver();
}
inline const std::string& ChatMessage::_internal_receiver() const {
  return receiver_.Get();
}
inline void ChatMessage::_internal_set_receiver(const std::string& value) {
  
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatMessage::set_receiver(std::string&& value) {
  
  receiver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ChatMessage.receiver)
}
inline void ChatMessage::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.receiver)
}
inline void ChatMessage::set_receiver(const char* value,
    size_t size) {
  
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.receiver)
}
inline std::string* ChatMessage::_internal_mutable_receiver() {
  
  return receiver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatMessage::release_receiver() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.receiver)
  return receiver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessage::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.receiver)
}
inline std::string* ChatMessage::unsafe_arena_release_receiver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ChatMessage.receiver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return receiver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatMessage::unsafe_arena_set_allocated_receiver(
    std::string* receiver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      receiver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ChatMessage.receiver)
}

// int64 timestamp = 3;
inline void ChatMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.timestamp)
  return _internal_timestamp();
}
inline void ChatMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ChatMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.timestamp)
}

// .chat.MassageType type = 4;
inline void ChatMessage::clear_type() {
  type_ = 0;
}
inline ::chat::MassageType ChatMessage::_internal_type() const {
  return static_cast< ::chat::MassageType >(type_);
}
inline ::chat::MassageType ChatMessage::type() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.type)
  return _internal_type();
}
inline void ChatMessage::_internal_set_type(::chat::MassageType value) {
  
  type_ = value;
}
inline void ChatMessage::set_type(::chat::MassageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.type)
}

// string text = 5;
inline bool ChatMessage::_internal_has_text() const {
  return content_case() == kText;
}
inline void ChatMessage::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void ChatMessage::clear_text() {
  if (_internal_has_text()) {
    content_.text_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_content();
  }
}
inline const std::string& ChatMessage::text() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.text)
  return _internal_text();
}
inline void ChatMessage::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.text)
}
inline std::string* ChatMessage::mutable_text() {
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.text)
  return _internal_mutable_text();
}
inline const std::string& ChatMessage::_internal_text() const {
  if (_internal_has_text()) {
    return content_.text_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ChatMessage::_internal_set_text(const std::string& value) {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatMessage::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:chat.ChatMessage.text)
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ChatMessage.text)
}
inline void ChatMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.text)
}
inline void ChatMessage::set_text(const char* value,
                             size_t size) {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.text)
}
inline std::string* ChatMessage::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return content_.text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.text)
  if (_internal_has_text()) {
    clear_has_content();
    return content_.text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ChatMessage::set_allocated_text(std::string* text) {
  if (has_content()) {
    clear_content();
  }
  if (text != nullptr) {
    set_has_text();
    content_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.text)
}
inline std::string* ChatMessage::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ChatMessage.text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_text()) {
    clear_has_content();
    return content_.text_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ChatMessage::unsafe_arena_set_allocated_text(std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_text()) {
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (text) {
    set_has_text();
    content_.text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ChatMessage.text)
}

// bytes image_data = 6;
inline bool ChatMessage::_internal_has_image_data() const {
  return content_case() == kImageData;
}
inline void ChatMessage::set_has_image_data() {
  _oneof_case_[0] = kImageData;
}
inline void ChatMessage::clear_image_data() {
  if (_internal_has_image_data()) {
    content_.image_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_content();
  }
}
inline const std::string& ChatMessage::image_data() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.image_data)
  return _internal_image_data();
}
inline void ChatMessage::set_image_data(const std::string& value) {
  _internal_set_image_data(value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.image_data)
}
inline std::string* ChatMessage::mutable_image_data() {
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.image_data)
  return _internal_mutable_image_data();
}
inline const std::string& ChatMessage::_internal_image_data() const {
  if (_internal_has_image_data()) {
    return content_.image_data_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ChatMessage::_internal_set_image_data(const std::string& value) {
  if (!_internal_has_image_data()) {
    clear_content();
    set_has_image_data();
    content_.image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatMessage::set_image_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:chat.ChatMessage.image_data)
  if (!_internal_has_image_data()) {
    clear_content();
    set_has_image_data();
    content_.image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ChatMessage.image_data)
}
inline void ChatMessage::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_image_data()) {
    clear_content();
    set_has_image_data();
    content_.image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.image_data)
}
inline void ChatMessage::set_image_data(const void* value,
                             size_t size) {
  if (!_internal_has_image_data()) {
    clear_content();
    set_has_image_data();
    content_.image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_data_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.image_data)
}
inline std::string* ChatMessage::_internal_mutable_image_data() {
  if (!_internal_has_image_data()) {
    clear_content();
    set_has_image_data();
    content_.image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return content_.image_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatMessage::release_image_data() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.image_data)
  if (_internal_has_image_data()) {
    clear_has_content();
    return content_.image_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ChatMessage::set_allocated_image_data(std::string* image_data) {
  if (has_content()) {
    clear_content();
  }
  if (image_data != nullptr) {
    set_has_image_data();
    content_.image_data_.UnsafeSetDefault(image_data);
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.image_data)
}
inline std::string* ChatMessage::unsafe_arena_release_image_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ChatMessage.image_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_image_data()) {
    clear_has_content();
    return content_.image_data_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ChatMessage::unsafe_arena_set_allocated_image_data(std::string* image_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_image_data()) {
    content_.image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (image_data) {
    set_has_image_data();
    content_.image_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_data, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ChatMessage.image_data)
}

// bool online = 7;
inline bool ChatMessage::_internal_has_online() const {
  return content_case() == kOnline;
}
inline void ChatMessage::set_has_online() {
  _oneof_case_[0] = kOnline;
}
inline void ChatMessage::clear_online() {
  if (_internal_has_online()) {
    content_.online_ = false;
    clear_has_content();
  }
}
inline bool ChatMessage::_internal_online() const {
  if (_internal_has_online()) {
    return content_.online_;
  }
  return false;
}
inline void ChatMessage::_internal_set_online(bool value) {
  if (!_internal_has_online()) {
    clear_content();
    set_has_online();
  }
  content_.online_ = value;
}
inline bool ChatMessage::online() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.online)
  return _internal_online();
}
inline void ChatMessage::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.online)
}

inline bool ChatMessage::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void ChatMessage::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ChatMessage::ContentCase ChatMessage::content_case() const {
  return ChatMessage::ContentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chat::MassageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::MassageType>() {
  return ::chat::MassageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
